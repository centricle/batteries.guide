---
import type { BatterySpec } from '../utils/batteryData';
import { getDimension, hasDimension } from '../utils/batteryData';

export interface Props {
  battery: BatterySpec;
  category: string;
}

const { battery, category } = Astro.props;

// Get primary chemistry info for display
const primaryChemistry = Object.keys(battery.chemistry)[0];
const primaryChemInfo = battery.chemistry[primaryChemistry];
---

<div class="bg-white hover:shadow-lg hover:bg-blue-50 transition-shadow duration-200 border border-gray-300">
  <a href={`/${category}/${battery.type.toLowerCase().replace(/[^a-z0-9]/g, '-')}`} class="block p-6" aria-label={`View detailed specifications for ${battery.type} battery`}>
    <div class="flex justify-between items-start mb-4">
      <div>
        <h3 class="text-xl font-semibold text-gray-900 mb-1">{battery.type}</h3>
        {battery.designation && (
          <p class="text-gray-600">{battery.designation}</p>
        )}
      </div>
      <div class="text-right">
        <span class="inline-block bg-slate-100 px-2 py-1 text-sm whitespace-nowrap text-slate-700 uppercase">
          {primaryChemistry.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
        </span>
      </div>
    </div>

    <div class="grid grid-cols-2 gap-4 mb-4">
      <div>
        <p class="text-gray-500 uppercase tracking-wide">Voltage</p>
        <p class="text-gray-900 font-medium">
          {primaryChemInfo.voltage_nominal}V
        </p>
      </div>
      <div>
        <p class="text-gray-500 uppercase tracking-wide">Capacity</p>
        <p class="text-gray-900 font-medium">
          {primaryChemInfo.capacity_typical} {primaryChemInfo.capacity_unit || 'mAh'}
        </p>
      </div>
    </div>

    <div class="mb-4">
      <p class="text-gray-500 uppercase tracking-wide mb-1">Dimensions</p>
      <p class="text-gray-900">
        {hasDimension(battery, 'diameter') ? `⌀${getDimension(battery, 'diameter')}mm` : `${getDimension(battery, 'width')}×${getDimension(battery, 'depth')}mm`}
        × {getDimension(battery, 'height')}mm
      </p>
    </div>

    <div class="mb-4">
      <p class="text-gray-500 uppercase tracking-wide mb-1">Common Uses</p>
      <div class="flex flex-wrap gap-1">
        {battery.common_devices.slice(0, 3).map((device: string) => (
          <span class="inline-block px-2 py-1 bg-gray-100 text-gray-700">
            {device}
          </span>
        ))}
        {battery.common_devices.length > 3 && (
          <span class="inline-block px-2 py-1 bg-gray-100 text-gray-700">
            +{battery.common_devices.length - 3} more
          </span>
        )}
      </div>
    </div>

    <p class="text-gray-600 line-clamp-2">{battery.notes}</p>
  </a>
</div>